generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String        @default("NO_NAME")
  email                   String        @unique(map: "user_email_idx")
  emailVerified           DateTime?     @db.Timestamp(6)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  image                   String?
  password                String?
  role                    String        @default("user")
  createdAt               DateTime      @default(now()) @db.Timestamp(6)
  updatedAt               DateTime      @updatedAt
  account                 Account[]
  session                 Session[]
  Transaction             Transaction[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Transaction {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String          @db.Uuid
  type            TransactionType
  paymentMethod   String? // Cash or Credit Card
  creditCardType  String?
  category        String
  subcategory     String?
  amount          Decimal         @db.Decimal(10, 2)
  description     String?
  transactionDate DateTime        @db.Timestamp(6)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum TransactionType {
  INCOME
  EXPENSE
}
